import pandas as pd
import numpy as np
from scipy.optimize import curve_fit
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
from scipy.integrate import cumulative_trapezoid
import math
from collections import defaultdict

# === CONFIGURATION ===
FILE_PATH = r"Data\Wageningen 2nd greenhouse challenge automatoes data.xlsx"
SHEET_NAME = "March Expanded"

def exp_decay(t, a, b, c):
    return a * np.exp(-b * t) + c

def van_genuchten(h, theta_r, theta_s, alpha, n):
    m = 1 - 1 / n
    return theta_r + (theta_s - theta_r) / ((1 + (alpha * h)**n) ** m)

def safe_standardize(series):
    std = series.std(ddof=0)
    if std != 0:
        return (series - series.mean()) / std
    else:
        return series - series.mean()

# === LOAD & CLEAN DATA ===
df = pd.read_excel(FILE_PATH, sheet_name=SHEET_NAME)
df = df[['%time', 'WC_slab1', 'water_sup', 'Tot_PAR', 'Tair']].copy()
df.columns = ['timestamp', 'WC_slab1', 'water_sup', 'Tot_PAR', 'Tair']

for col in ['WC_slab1', 'water_sup', 'Tot_PAR', 'Tair']:
    df[col] = pd.to_numeric(df[col].astype(str).str.replace(',', '.'), errors='coerce')
df.dropna(inplace=True)
df['timestamp'] = pd.to_datetime(df['timestamp'])
df.sort_values('timestamp', inplace=True)
df['date'] = df['timestamp'].dt.date

unique_dates = sorted(df['date'].unique())
split_index = int(len(unique_dates) * 0.8)
train_dates = unique_dates[:split_index]
test_dates = unique_dates[split_index:]

train_segments = []
test_segments = []

# === SEGMENT DRYDOWN EVENTS ACROSS DAYS (IMPROVED LOGIC) ===
df['water_sup_diff'] = df['water_sup'].diff().fillna(0)
unique_dates = sorted(df['date'].unique())

train_segments = []
test_segments = []

for i in range(len(unique_dates) - 1):
    day1 = unique_dates[i]
    day2 = unique_dates[i + 1]

    df_day1 = df[df['date'] == day1]
    df_day2 = df[df['date'] == day2]

    if df_day1.empty or df_day2.empty:
        continue

    last_water_time_day1 = df_day1[df_day1['water_sup_diff'] > 0]['timestamp'].max()
    first_water_time_day2 = df_day2[df_day2['water_sup_diff'] > 0]['timestamp'].min()

    if pd.isna(last_water_time_day1) or pd.isna(first_water_time_day2):
        continue

    segment_mask = (df['timestamp'] > last_water_time_day1) & (df['timestamp'] < first_water_time_day2)
    segment = df[segment_mask].copy()

    if segment.empty or len(segment) < 6:
        continue

    # Normalize & prepare
    segment['time'] = (segment['timestamp'] - segment['timestamp'].min()).dt.total_seconds() / 3600
    theta_min = segment['WC_slab1'].min()
    theta_max = segment['WC_slab1'].max()
    if theta_max == theta_min:
        continue

    segment['theta'] = (segment['WC_slab1'] - theta_min) / (theta_max - theta_min)
    segment['h_sim'] = np.exp(segment['time'] / segment['time'].max() * 5)
    segment['Tot_PAR'] = safe_standardize(segment['Tot_PAR'])
    segment['Tair'] = safe_standardize(segment['Tair'])

    # Use first date for train/test split
    if day1 in train_dates and day2 in train_dates:
        train_segments.append(segment)
    elif day1 in test_dates or day2 in test_dates:
        test_segments.append((day1, segment))

# Handle last day
last_day = unique_dates[-1]
df_last_day = df[df['date'] == last_day]
last_water_time_last_day = df_last_day[df_last_day['water_sup_diff'] > 0]['timestamp'].max()

if pd.notna(last_water_time_last_day):
    segment_mask = (df['timestamp'] > last_water_time_last_day)
    segment = df[segment_mask].copy()
    if not segment.empty and len(segment) >= 6:
        segment['time'] = (segment['timestamp'] - segment['timestamp'].min()).dt.total_seconds() / 3600
        theta_min = segment['WC_slab1'].min()
        theta_max = segment['WC_slab1'].max()
        if theta_max > theta_min:
            segment['theta'] = (segment['WC_slab1'] - theta_min) / (theta_max - theta_min)
            segment['h_sim'] = np.exp(segment['time'] / segment['time'].max() * 5)
            segment['Tot_PAR'] = safe_standardize(segment['Tot_PAR'])
            segment['Tair'] = safe_standardize(segment['Tair'])
            if last_day in train_dates:
                train_segments.append(segment)
            else:
                test_segments.append((last_day, segment))


# === TRAIN MODELS ON TRAINING SET ===
train_data = pd.concat(train_segments)
t_train = train_data['time'].values
theta_train = train_data['theta'].values
par_train = train_data['Tot_PAR'].values
tair_train = train_data['Tair'].values
h_train = train_data['h_sim'].values

# Train water balance model
phys_params = None
try:
    def theta_phys_model(t, k1, k2, k3):
        et = k1 * train_data['Tot_PAR'].values + k2 * train_data['Tair'].values + k3
        cum_et = cumulative_trapezoid(et, t, initial=0)
        return theta_train[0] - cum_et

    phys_params, _ = curve_fit(theta_phys_model, t_train, theta_train, p0=[0.01, 0.01, 0.01],)
except:
    pass

# Train Van Genuchten
vg_params = None
try:
    vg_params, _ = curve_fit(van_genuchten, h_train, theta_train,
                             p0=[0.05, 1.0, 0.05, 2.0],
                             bounds=([0, 0.8, 0.0001, 1.1], [0.5, 1.2, 1.0, 5.0]),
                             maxfev=10000)
except:
    pass

# Train grey-box (residual of VG + linear regression)
linreg_grey = LinearRegression()
try:
    vg_train_pred = van_genuchten(h_train, *vg_params)
    residuals = theta_train - vg_train_pred
    linreg_grey.fit(train_data[['time']], residuals)
except:
    linreg_grey = None

# Train exponential decay
exp_params = None
try:
    exp_params, _ = curve_fit(exp_decay, t_train, theta_train, p0=[1, 0.1, 0])
except:
    pass

# Train linear regression
linreg = LinearRegression()
try:
    linreg.fit(train_data[['time']], theta_train)
except:
    linreg = None

# === APPLY MODELS TO TEST SEGMENTS ===
segments_by_id = {}
results = []
event_id = 0

for date, segment in test_segments:
    t = segment['time'].values
    theta = segment['theta'].values
    segment = segment.copy()

    try:
        if phys_params is not None:
            et = phys_params[0] * segment['Tot_PAR'].values + phys_params[1] * segment['Tair'].values + phys_params[2]
            cum_et = cumulative_trapezoid(et, t, initial=0)
            segment.loc[:, 'water_balance_pred'] = theta[0] - cum_et
            r2_wb = r2_score(theta, segment['water_balance_pred'])
        else:
            r2_wb = None
    except:
        r2_wb = None

    try:
        if vg_params is not None:
            segment.loc[:, 'vg_pred'] = van_genuchten(segment['h_sim'], *vg_params)
            r2_vg = r2_score(theta, segment['vg_pred'])
            if linreg_grey is not None:
                segment.loc[:, 'greybox_pred'] = segment['vg_pred'] + linreg_grey.predict(segment[['time']])
                r2_grey = r2_score(theta, segment['greybox_pred'])
            else:
                r2_grey = None
        else:
            r2_vg = None
            r2_grey = None
    except:
        r2_vg = None
        r2_grey = None

    try:
        if exp_params is not None:
            segment.loc[:, 'exp_pred'] = exp_decay(t, *exp_params)
            r2_exp = r2_score(theta, segment['exp_pred'])
        else:
            r2_exp = None
    except:
        r2_exp = None

    try:
        if linreg is not None:
            segment.loc[:, 'lin_pred'] = linreg.predict(segment[['time']])
            r2_lin = r2_score(theta, segment['lin_pred'])
        else:
            r2_lin = None
    except:
        r2_lin = None

    # Denormalize predictions and observations before saving
    theta_min = segment['WC_slab1'].min()
    theta_max = segment['WC_slab1'].max()

    segment['WC_observed'] = segment['theta'] * (theta_max - theta_min) + theta_min
    for model in ['vg_pred', 'water_balance_pred', 'exp_pred', 'lin_pred', 'greybox_pred']:
        if model in segment:
            segment[model + '_WC'] = segment[model] * (theta_max - theta_min) + theta_min

    segments_by_id[event_id] = segment.copy()


    results.append({
        'drydown_event_id': event_id,
        'Van Genuchten R2': r2_vg,
        'Water Balance R2': r2_wb,
        'Exponential Decay R2': r2_exp,
        'Linear Regression R2': r2_lin,
        'Grey-box Model R2': r2_grey,
        'date': date
    })
    event_id += 1

# === PLOT RESULTS ===

# Organize segments by date
segments_by_date = defaultdict(list)
for i, result in enumerate(results):
    segments_by_date[result['date']].append(i)

# Sort the unique test dates
test_dates_sorted = sorted(set(r['date'] for r in results))

# === Styling Preferences ===
title_fontsize = 28
axis_label_fontsize = 24
tick_label_fontsize = 20
legend_fontsize = 20
fig_width_per_plot = 12
fig_height = 10  # fixed height for square shape
days_per_fig = 1

# Recalculate number of figures to generate
n_figs = math.ceil(len(test_dates_sorted) / days_per_fig)

# === Plot ===
'''
for fig_idx in range(n_figs):
    group_dates = test_dates_sorted[fig_idx * days_per_fig : (fig_idx + 1) * days_per_fig]
    segment_ids = [sid for date in group_dates for sid in segments_by_date[date]]

    if not segment_ids:
        continue

    fig, axes = plt.subplots(
        nrows=1,
        ncols=len(segment_ids),
        figsize=(fig_width_per_plot * len(segment_ids), fig_height),
        sharey=False
    )

    if len(segment_ids) == 1:
        axes = [axes]  # ensure iterable

    for ax, event_id in zip(axes, segment_ids):
        segment = segments_by_id[event_id]
        ax.plot(segment['time'], segment['WC_observed'], 'o', label='Observed')
        #for model in ['vg_pred', 'water_balance_pred', 'exp_pred', 'lin_pred', 'greybox_pred']:
        for model in ['vg_pred']:
            col = model + '_WC'
            if col in segment:
                ax.plot(segment['time'], segment[col], label=model.replace('_', ' ').title())
        ax.set_ylabel('Water Content (WC_slab1) [%]', fontsize=axis_label_fontsize)


        ax.set_title(f"Drydown Event {segment['timestamp'].dt.date.iloc[0]}", fontsize=title_fontsize)
        ax.set_xlabel('Time (h)', fontsize=axis_label_fontsize)
        ax.tick_params(axis='both', labelsize=tick_label_fontsize)
        ax.legend(fontsize=legend_fontsize)
        ax.grid(True)

    plt.tight_layout()
    plt.show()'''



# === SUMMARY ===
comparison_df = pd.DataFrame(results)
model_cols = ['Van Genuchten R2', 'Water Balance R2', 'Exponential Decay R2', 'Linear Regression R2', 'Grey-box Model R2']
comparison_df['Best Model'] = comparison_df[model_cols].idxmax(axis=1)
best_model_counts = comparison_df['Best Model'].value_counts()

print("Model Comparison Summary:")
print(comparison_df.sort_values('drydown_event_id').to_string(index=False))
print("\nBest Model Frequency Summary:")
print(best_model_counts.to_string())

'''
# === Plot Van Genuchten residuals and grey-box regression line ===
for fig_idx in range(n_figs):
    group_dates = test_dates_sorted[fig_idx * days_per_fig : (fig_idx + 1) * days_per_fig]
    segment_ids = [sid for date in group_dates for sid in segments_by_date[date]]

    if not segment_ids:
        continue

    fig, axes = plt.subplots(
        nrows=1,
        ncols=len(segment_ids),
        figsize=(fig_width_per_plot * len(segment_ids), fig_height),
        sharey=False
    )

    if len(segment_ids) == 1:
        axes = [axes]

    for ax, event_id in zip(axes, segment_ids):
        segment = segments_by_id[event_id]

        if 'vg_pred_WC' in segment and 'WC_observed' in segment:
            # Compute residuals
            segment['vg_residual'] = segment['WC_observed'] - segment['vg_pred_WC']

            # Plot actual residuals
            ax.plot(segment['time'], segment['vg_residual'], 'o', label='VG Residuals')

            # Grey-box model = linear regression on residuals
            if 'greybox_pred_WC' in segment:
                # Grey-box correction = residual prediction
                greybox_correction = segment['greybox_pred_WC'] - segment['vg_pred_WC']
                ax.plot(segment['time'], greybox_correction, '-', label='Grey-box Fit (LR)', linewidth=3)

            ax.axhline(0, color='black', linestyle='--', linewidth=1)
            ax.set_title(f"VG Residuals + Grey-box Fit\n{segment['timestamp'].dt.date.iloc[0]}", fontsize=title_fontsize)
            ax.set_xlabel('Time (h)', fontsize=axis_label_fontsize)
            ax.set_ylabel('Residual (Observed - VG) [%]', fontsize=axis_label_fontsize)
            ax.tick_params(axis='both', labelsize=tick_label_fontsize)
            ax.legend(fontsize=legend_fontsize)
            ax.grid(True)

    plt.tight_layout()
    plt.show()'''

'''
# === PLOT BEST AND WORST FIT ===

# Step 1: Get best and worst event IDs
best_idx = comparison_df["Van Genuchten R2"].idxmax()
worst_idx = comparison_df["Van Genuchten R2"].idxmin()

best_id = comparison_df.loc[best_idx, "drydown_event_id"]
worst_id = comparison_df.loc[worst_idx, "drydown_event_id"]

segment_ids = [best_id, worst_id]
labels = ["Best Fit", "Worst Fit"]

# Step 2: Create subplots
fig, axes = plt.subplots(
    nrows=1,
    ncols=2,
    figsize=(fig_width_per_plot * 2, fig_height),
    sharey=False
)

# Step 3: Plot both segments
for ax, event_id, label in zip(axes, segment_ids, labels):
    segment = segments_by_id[event_id]
    r2 = comparison_df.loc[comparison_df["drydown_event_id"] == event_id, "Van Genuchten R2"].values[0]
    date = segment['timestamp'].dt.date.iloc[0]

    ax.plot(segment['time'], segment['WC_observed'], 'o', label='Observed')

    if 'vg_pred_WC' in segment:
        ax.plot(segment['time'], segment['vg_pred_WC'], label='Van Genuchten Fit')

    ax.set_title(f"{label} – {date}\nR² = {r2:.4f}", fontsize=title_fontsize)
    ax.set_xlabel("Time (h)", fontsize=axis_label_fontsize)
    ax.set_ylabel("Water Content (WC_slab1) [%]", fontsize=axis_label_fontsize)
    ax.tick_params(axis='both', labelsize=tick_label_fontsize)
    ax.legend(fontsize=legend_fontsize)
    ax.grid(True)

plt.tight_layout(rect=[0, 0, 1, 0.95])  # Leave space for suptitle
plt.show()

# === PLOT ERROR/RESIDUAL ===

# Step 1: Get best and worst event IDs
best_idx = comparison_df["Van Genuchten R2"].idxmax()
worst_idx = comparison_df["Van Genuchten R2"].idxmin()

best_id = comparison_df.loc[best_idx, "drydown_event_id"]
worst_id = comparison_df.loc[worst_idx, "drydown_event_id"]

segment_ids = [best_id, worst_id]
labels = ["Best Fit", "Worst Fit"]

# Step 2: Create subplots for error
fig, axes = plt.subplots(
    nrows=1,
    ncols=2,
    figsize=(fig_width_per_plot * 2, fig_height),
    sharey=False
)

# Step 3: Plot residuals for each segment
for ax, event_id, label in zip(axes, segment_ids, labels):
    segment = segments_by_id[event_id]
    date = segment['timestamp'].dt.date.iloc[0]

    if 'vg_pred_WC' not in segment:
        continue

    error = segment['vg_pred_WC'] - segment['WC_observed']

    ax.plot(segment['time'], error, marker='o', linestyle='-', label='Residual (Prediction - Observed)')
    ax.axhline(0, color='gray', linestyle='--', linewidth=1)

    ax.set_title(f"{label} – {date}", fontsize=title_fontsize)
    ax.set_xlabel("Time (h)", fontsize=axis_label_fontsize)
    ax.set_ylabel("Error (ΔWC)", fontsize=axis_label_fontsize)
    ax.tick_params(axis='both', labelsize=tick_label_fontsize)
    ax.legend(fontsize=legend_fontsize)
    ax.grid(True)

plt.tight_layout(rect=[0, 0, 1, 0.92])
plt.show()
'''

# === PLOT BEST FIT ONLY ===

# Step 1: Get best event ID
best_idx = comparison_df["Van Genuchten R2"].idxmax()
best_id = comparison_df.loc[best_idx, "drydown_event_id"]
label = "Best Fit"

# Step 2: Create single subplot
fig, ax = plt.subplots(
    nrows=1,
    ncols=1,
    figsize=(fig_width_per_plot, fig_height),
    sharey=False
)

# Step 3: Plot best segment
segment = segments_by_id[best_id]
r2 = comparison_df.loc[comparison_df["drydown_event_id"] == best_id, "Van Genuchten R2"].values[0]
date = segment['timestamp'].dt.date.iloc[0]

ax.plot(segment['time'], segment['WC_observed'], 'o', label='Observed')

if 'vg_pred_WC' in segment:
    ax.plot(segment['time'], segment['vg_pred_WC'], label='Van Genuchten')

ax.set_title(f"Van Genuchten {label} – {date}\nR² = {r2:.4f}", fontsize=title_fontsize)
ax.set_xlabel("Time (h)", fontsize=axis_label_fontsize)
ax.set_ylabel("Water Content (WC_slab1) [%]", fontsize=axis_label_fontsize)
ax.tick_params(axis='both', labelsize=tick_label_fontsize)
ax.legend(fontsize=legend_fontsize)
ax.grid(True)

plt.tight_layout()
plt.show()

# === PLOT BEST FIT RESIDUAL ONLY ===

# Step 1: Use best_id from above
segment = segments_by_id[best_id]
date = segment['timestamp'].dt.date.iloc[0]

# Step 2: Create single subplot
fig, ax = plt.subplots(
    nrows=1,
    ncols=1,
    figsize=(fig_width_per_plot, fig_height),
    sharey=False
)

# Step 3: Compute and plot residuals
if 'vg_pred_WC' in segment:
    error = segment['vg_pred_WC'] - segment['WC_observed']
    ax.plot(segment['time'], error, marker='o', linestyle='-', label='Residual (Prediction - Observed)')
    ax.axhline(0, color='gray', linestyle='--', linewidth=1)

ax.set_title(f"Van Genuchten - Residual – Best Fit ({date})", fontsize=title_fontsize)
ax.set_xlabel("Time (h)", fontsize=axis_label_fontsize)
ax.set_ylabel("Error (ΔWC) [% volumetric water content]", fontsize=axis_label_fontsize)
ax.tick_params(axis='both', labelsize=tick_label_fontsize)
ax.legend(fontsize=legend_fontsize)
ax.grid(True)

plt.tight_layout()
plt.show()
