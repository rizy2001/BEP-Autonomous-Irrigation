import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score, root_mean_squared_error
from scipy.optimize import curve_fit

# === Load and clean data ===
file_path = r"Data\Wageningen 2nd greenhouse challenge automatoes data.xlsx"
df = pd.read_excel(file_path, sheet_name="Post water event March")

df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
df['WC_slab1'] = pd.to_numeric(df['WC_slab1'], errors='coerce')
df['drydown_day'] = pd.to_datetime(df['drydown_day'], errors='coerce').dt.date
df = df.dropna(subset=['WC_slab1', 'timestamp', 'drydown_day'])

df['minutes_since_start'] = df.groupby('drydown_day')['timestamp'].transform(
    lambda x: (x - x.min()).dt.total_seconds() / 60
)

# === Define drydown models ===
def linear_model(t, r, wc0):
    return wc0 - r * t

def exp_model(t, k, wc0, wc_min):
    return wc_min + (wc0 - wc_min) * np.exp(-k * t)

# === Split data into train/test days ===
unique_days = sorted(df['drydown_day'].unique())
split_index = int(len(unique_days) * 0.8)
train_days = unique_days[:split_index]
test_days = unique_days[split_index:]

# === Train on first 80% of days ===
linear_params = []
exp_params = []

for day in train_days:
    segment = df[df['drydown_day'] == day]
    t = segment['minutes_since_start'].values
    y = segment['WC_slab1'].values
    if len(t) < 5:
        continue
    try:
        lin_popt, _ = curve_fit(linear_model, t, y, p0=[0.01, y[0]])
        linear_params.append(lin_popt)
    except:
        continue
    try:
        exp_popt, _ = curve_fit(exp_model, t, y, p0=[0.01, y[0], y[-1]])
        exp_params.append(exp_popt)
    except:
        continue

# Average parameters
avg_lin_r, avg_lin_wc0 = np.mean(linear_params, axis=0)
avg_exp_k, avg_exp_wc0, avg_exp_wcmin = np.mean(exp_params, axis=0)

# === Evaluate on last 20% of days ===
plt.figure(figsize=(12, len(test_days) * 4))

for i, day in enumerate(test_days, 1):
    segment = df[df['drydown_day'] == day].copy()
    t = segment['minutes_since_start'].values
    y = segment['WC_slab1'].values
    ts = segment['timestamp'].values

    if len(t) < 5:
        continue

    y_lin = linear_model(t, avg_lin_r, avg_lin_wc0)
    y_exp = exp_model(t, avg_exp_k, avg_exp_wc0, avg_exp_wcmin)

    r2_lin = r2_score(y, y_lin)
    mse_lin = root_mean_squared_error(y, y_lin)

    r2_exp = r2_score(y, y_exp)
    mse_exp = root_mean_squared_error(y, y_exp)

    # Print scores
    print(f"=== {day} ===")
    print(f"Linear:     R² = {r2_lin:.4f}, RMSE = {mse_lin:.5f}")
    print(f"Exponential: R² = {r2_exp:.4f}, RMSE = {mse_exp:.5f}")
    print()

    # Plot
    plt.subplot(len(test_days), 1, i)
    plt.plot(ts, y, label="Actual", marker='o')
    plt.plot(ts, y_lin, label=f"Linear Fit", linestyle='--')
    plt.plot(ts, y_exp, label=f"Exponential Fit", linestyle=':')
    plt.title(f"{day}")
    plt.ylabel("WC_slab1")
    plt.legend()
    plt.grid(True)

    # Annotate with R² and RMSE
    text = (f"Linear R²: {r2_lin:.3f}, RMSE: {mse_lin:.4f}\n"
            f"Exp R²:    {r2_exp:.3f}, RMSE: {mse_exp:.4f}")
    plt.text(0.01, 0.01, text, transform=plt.gca().transAxes,
             fontsize=9, verticalalignment='bottom', bbox=dict(facecolor='white', alpha=0.6))

plt.xlabel("Time")
plt.tight_layout()
plt.show()
