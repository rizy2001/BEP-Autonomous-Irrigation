import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# === Load Excel data ===
file_path = "Data\Wageningen 2nd greenhouse challenge automatoes data.xlsx"
df = pd.read_excel(file_path, sheet_name="Combined")

# === Rename and convert timestamp ===
df = df.rename(columns={'%time': 'timestamp'})
df['timestamp'] = pd.to_datetime(df['timestamp'])

# === Extract hour of day and cyclical encode it ===
df['hour'] = df['timestamp'].dt.hour + df['timestamp'].dt.minute / 60
df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)

# === Convert relevant columns to numeric ===
columns_to_convert = [
    'WC_slab1', 't_slab1', 'CO2air', 'Rhair', 'Tair', 'Tot_PAR', 'water_sup'
]
df[columns_to_convert] = df[columns_to_convert].apply(pd.to_numeric, errors='coerce')
df = df.dropna(subset=columns_to_convert)

# === Add binary feature for water being supplied ===
df['water_supplied'] = df['water_sup'].diff().fillna(0) > 0
df['water_supplied'] = df['water_supplied'].astype(int)

# === Add lag features for WC_slab1 ===
df['WC_slab1_prev1'] = df['WC_slab1'].shift(1)
df['WC_slab1_prev2'] = df['WC_slab1'].shift(2)
df['WC_slab1_prev3'] = df['WC_slab1'].shift(3)

# === Compute delta WC_slab1 (target) ===
df['delta_WC_slab1'] = df['WC_slab1'].shift(-1) - df['WC_slab1']

# === Drop rows with missing values in features or target ===
df = df.dropna(subset=[
    'WC_slab1_prev1', 'WC_slab1_prev2', 'WC_slab1_prev3',
    'delta_WC_slab1'
])

# === Define features and target ===
features = [
    't_slab1', 'CO2air', 'Rhair', 'Tair', 'Tot_PAR', 'water_supplied',
    'WC_slab1_prev1', 'WC_slab1_prev2', 'WC_slab1_prev3',
    'hour_sin', 'hour_cos'
]
X = df[features]
y = df['delta_WC_slab1']

# === Final cleanup ===
X = X.dropna()
y = y.loc[X.index]

# === Train/test split ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === Train model ===
model = LinearRegression().fit(X_train, y_train)

# === Evaluate model ===
r2 = r2_score(y_test, model.predict(X_test))

# === Output ===
print(f"RÂ² score: {r2:.3f}")
print("Coefficients:")
for name, coef in zip(X.columns, model.coef_):
    print(f"  {name}: {coef:.4f}")
